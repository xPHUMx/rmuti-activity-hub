
// import { NextResponse } from "next/server";
// import connectToDatabase from "../../../utils/db";


// // GET Method: ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
// export async function GET() {
//   console.log("GET /api/online-users called");
//   try {
//     const db = await connectToDatabase();

//     // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
//     const onlineUsers = await db.collection("onlineUsers").find().toArray();

//     console.log("Online users:", onlineUsers);

//     return NextResponse.json(
//       { count: onlineUsers.length, users: onlineUsers },
//       { status: 200 }
//     );
//   } catch (error) {
//     console.error("Error in GET /api/online-users:", error);
//     return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
//   }
// }

// // POST Method: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
// export async function POST(req: Request) {
//   console.log("POST /api/online-users called");
//   try {
//     const body = await req.json().catch(() => null);

//     if (!body || !body.userId) {
//       return NextResponse.json({ error: "User ID is required" }, { status: 400 });
//     }

//     const { userId } = body;
//     const db = await connectToDatabase();

//     console.log("Adding or updating userId:", userId);

//     // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
//     await db.collection("onlineUsers").updateOne(
//       { userId },
//       { $set: { userId, lastActive: new Date() } },
//       { upsert: true }
//     );

//     // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
//     const onlineUsers = await db.collection("onlineUsers").find().toArray();

//     return NextResponse.json(
//       { count: onlineUsers.length, users: onlineUsers },
//       { status: 200 }
//     );
//   } catch (error) {
//     console.error("Error in POST /api/online-users:", error);
//     return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
//   }
// }

// // DELETE Method: ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
// export async function DELETE(req: Request) {
//   console.log("DELETE /api/online-users called"); // Log API Call
//   try {
//     const body = await req.json();

//     // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ body ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
//     console.log("Request Body:", body); // Log body ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠

//     if (!body || !body.userId) {
//       console.log("Invalid request body:", body); // Log ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ userId
//       return NextResponse.json({ error: "User ID is required" }, { status: 400 });
//     }

//     const { userId } = body;
//     const db = await connectToDatabase();

//     console.log("Attempting to delete userId:", userId); // Log userId ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö

//     // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
//     const document = await db.collection("onlineUsers").findOne({ userId: String(userId) });
//     console.log("Document found for deletion:", document); // Log ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏ö

//     // ‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
//     const result = await db.collection("onlineUsers").deleteOne({
//       userId: String(userId), // ‡πÉ‡∏ä‡πâ userId ‡πÄ‡∏õ‡πá‡∏ô String
//     });
//     console.log("Delete result:", result); // Log ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö

//     // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
//     const onlineUsers = await db.collection("onlineUsers").find().toArray();
//     console.log("Remaining online users:", onlineUsers); // Log ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà

//     return NextResponse.json(
//       { count: onlineUsers.length, users: onlineUsers },
//       { status: 200 }
//     );
//   } catch (error) {
//     console.error("Error in DELETE /api/online-users:", error); // Log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
//     return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
//   }
// }

import { NextResponse } from "next/server";
import connectToDatabase from "../../../utils/db";

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå (‡πÄ‡∏ä‡πà‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
const ONLINE_TIMEOUT = 5 * 60 * 1000;

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
async function cleanExpiredUsers(db: any) {
  const now = new Date();
  const expiredTime = new Date(now.getTime() - ONLINE_TIMEOUT);
  await db.collection("onlineUsers").deleteMany({ lastActive: { $lt: expiredTime } });
}

// ‚úÖ GET Method: ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
export async function GET() {
  console.log("‚úÖ GET /api/online-users called");
  try {
    const db = await connectToDatabase();

    // üîπ ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
    await cleanExpiredUsers(db);

    // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const onlineUsers = await db.collection("onlineUsers").find().toArray();

    console.log("üìä Online Users:", onlineUsers);

    return NextResponse.json(
      { count: onlineUsers.length, users: onlineUsers },
      { status: 200 }
    );
  } catch (error) {
    console.error("‚ùå Error in GET /api/online-users:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

// ‚úÖ POST Method: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
export async function POST(req: Request) {
  console.log("‚úÖ POST /api/online-users called");
  try {
    const body = await req.json();

    if (!body || !body.userId) {
      return NextResponse.json({ error: "User ID is required" }, { status: 400 });
    }

    const { userId } = body;
    const db = await connectToDatabase();

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingUser = await db.collection("onlineUsers").findOne({ userId });

    if (!existingUser) {
      console.log("üü¢ Adding new online user:", userId);
      await db.collection("onlineUsers").insertOne({ userId, lastActive: new Date() });
    } else {
      console.log("‚ö†Ô∏è User already online:", userId);
      await db.collection("onlineUsers").updateOne(
        { userId },
        { $set: { lastActive: new Date() } }
      );
    }

    // üîπ ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
    await cleanExpiredUsers(db);

    // üîπ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const onlineUsers = await db.collection("onlineUsers").find().toArray();
    return NextResponse.json(
      { count: onlineUsers.length, users: onlineUsers },
      { status: 200 }
    );
  } catch (error) {
    console.error("‚ùå Error in POST /api/online-users:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

// ‚úÖ DELETE Method: ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
export async function DELETE(req: Request) {
  console.log("‚úÖ DELETE /api/online-users called");

  try {
    const body = await req.json();
    console.log("üîç Received body:", body); // ‚úÖ Debug ‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ

    if (!body || !body.userId) {
      console.log("‚ö†Ô∏è Missing userId in DELETE request");
      return NextResponse.json({ error: "User ID is required" }, { status: 400 });
    }

    const { userId } = body;
    const db = await connectToDatabase();

    console.log("üõë Attempting to delete user:", userId);
    const result = await db.collection("onlineUsers").deleteOne({ userId });

    if (result.deletedCount === 0) {
      console.log("‚ö†Ô∏è User not found in onlineUsers:", userId);
    } else {
      console.log("‚úÖ User deleted:", userId);
    }

    await cleanExpiredUsers(db);

    const onlineUsers = await db.collection("onlineUsers").find().toArray();
    return NextResponse.json(
      { count: onlineUsers.length, users: onlineUsers },
      { status: 200 }
    );
  } catch (error) {
    console.error("‚ùå Error in DELETE /api/online-users:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
