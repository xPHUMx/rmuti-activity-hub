

import { NextResponse } from "next/server";
import connectToDatabase from "../../../utils/db";

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå (‡πÄ‡∏ä‡πà‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
const ONLINE_TIMEOUT = 30 * 60 * 1000;

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
async function cleanExpiredUsers(db: any) {
  const now = new Date();
  const expiredTime = new Date(now.getTime() - ONLINE_TIMEOUT);
  await db.collection("onlineUsers").deleteMany({ lastActive: { $lt: expiredTime } });
}

// ‚úÖ GET Method: ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
export async function GET() {
  console.log("‚úÖ GET /api/online-users called");
  try {
    const db = await connectToDatabase();

    // üîπ ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
    await cleanExpiredUsers(db);

    // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const onlineUsers = await db.collection("onlineUsers").find().toArray();

    console.log("üìä Online Users:", onlineUsers);

    return NextResponse.json(
      { count: onlineUsers.length, users: onlineUsers },
      { status: 200 }
    );
  } catch (error) {
    console.error("‚ùå Error in GET /api/online-users:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

// ‚úÖ POST Method: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
export async function POST(req: Request) {
  console.log("‚úÖ POST /api/online-users called");
  try {
    const body = await req.json();

    if (!body || !body.userId) {
      return NextResponse.json({ error: "User ID is required" }, { status: 400 });
    }

    const { userId } = body;
    const db = await connectToDatabase();

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingUser = await db.collection("onlineUsers").findOne({ userId });

    if (!existingUser) {
      console.log("üü¢ Adding new online user:", userId);
      await db.collection("onlineUsers").insertOne({ userId, lastActive: new Date() });
    } else {
      console.log("‚ö†Ô∏è User already online:", userId);
      await db.collection("onlineUsers").updateOne(
        { userId },
        { $set: { lastActive: new Date() } }
      );
    }

    // üîπ ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
    await cleanExpiredUsers(db);

    // üîπ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const onlineUsers = await db.collection("onlineUsers").find().toArray();
    return NextResponse.json(
      { count: onlineUsers.length, users: onlineUsers },
      { status: 200 }
    );
  } catch (error) {
    console.error("‚ùå Error in POST /api/online-users:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

// ‚úÖ DELETE Method: ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
export async function DELETE(req: Request) {
  console.log("‚úÖ DELETE /api/online-users called");

  try {
    const body = await req.json();
    console.log("üîç Received body:", body); // ‚úÖ Debug ‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ

    if (!body || !body.userId) {
      console.log("‚ö†Ô∏è Missing userId in DELETE request");
      return NextResponse.json({ error: "User ID is required" }, { status: 400 });
    }

    const { userId } = body;
    const db = await connectToDatabase();

    console.log("üõë Attempting to delete user:", userId);
    const result = await db.collection("onlineUsers").deleteOne({ userId });

    if (result.deletedCount === 0) {
      console.log("‚ö†Ô∏è User not found in onlineUsers:", userId);
    } else {
      console.log("‚úÖ User deleted:", userId);
    }

    await cleanExpiredUsers(db);

    const onlineUsers = await db.collection("onlineUsers").find().toArray();
    return NextResponse.json(
      { count: onlineUsers.length, users: onlineUsers },
      { status: 200 }
    );
  } catch (error) {
    console.error("‚ùå Error in DELETE /api/online-users:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
