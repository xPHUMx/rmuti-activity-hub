
// import { NextRequest, NextResponse } from "next/server";
// import { S3Client, PutObjectCommand, DeleteObjectCommand } from "@aws-sdk/client-s3";
// import connectToDatabase from "../../../utils/db";
// import News from "../../../models/News";

// connectToDatabase();

// // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AWS S3 Client
// const s3 = new S3Client({
//   region: process.env.AWS_REGION,
//   credentials: {
//     accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
//     secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
//   },
// });

// // GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// export async function GET() {
//   try {
//     const news = await News.find({});
//     return NextResponse.json(news, { status: 200 });
//   } catch (error) {
//     const errorMessage = error instanceof Error ? error.message : "Unknown error";
//     return NextResponse.json({ message: "Failed to fetch news", error: errorMessage }, { status: 500 });
//   }
// }

// // POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£
// export async function POST(req: NextRequest) {
//   try {
//     const formData = await req.formData();
//     const file = formData.get("file") as File;
//     const title = formData.get("title") as string;
//     const content = formData.get("content") as string;

//     if (!file || !title || !content) {
//       return NextResponse.json({ message: "Missing required fields" }, { status: 400 });
//     }

//     const fileName = `${Date.now()}-${file.name}`;
//     const uploadParams = {
//       Bucket: process.env.AWS_BUCKET_NAME,
//       Key: fileName,
//       Body: Buffer.from(await file.arrayBuffer()),
//       ContentType: file.type,
//     };

//     // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á S3
//     await s3.send(new PutObjectCommand(uploadParams));

//     const s3Url = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${fileName}`;

//     // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô MongoDB
//     const newNews = await News.create({
//       title,
//       image: s3Url,
//       content,
//     });

//     return NextResponse.json(newNews, { status: 201 });
//   } catch (error) {
//     const errorMessage = error instanceof Error ? error.message : "Unknown error";
//     return NextResponse.json({ message: "Failed to create news", error: errorMessage }, { status: 500 });
//   }
// }

// // DELETE: ‡∏•‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£
// export async function DELETE(req: NextRequest) {
//   try {
//     const { id } = await req.json();

//     if (!id) {
//       return NextResponse.json({ message: "News ID is required" }, { status: 400 });
//     }

//     const news = await News.findById(id);
//     if (!news) {
//       return NextResponse.json({ message: "News not found" }, { status: 404 });
//     }

//     // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô S3
//     const s3Key = news.image.split("/").pop();
//     const deleteParams = {
//       Bucket: process.env.AWS_BUCKET_NAME,
//       Key: s3Key,
//     };

//     await s3.send(new DeleteObjectCommand(deleteParams));

//     // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô MongoDB
//     await News.deleteOne({ _id: id });

//     return NextResponse.json({ message: "News deleted successfully" }, { status: 200 });
//   } catch (error) {
//     const errorMessage = error instanceof Error ? error.message : "Unknown error";
//     return NextResponse.json({ message: "Failed to delete news", error: errorMessage }, { status: 500 });
//   }
// }

// import { NextRequest, NextResponse } from "next/server";
// import { S3Client, PutObjectCommand, DeleteObjectCommand } from "@aws-sdk/client-s3";
// import connectToDatabase from "@/utils/db";
// import News from "@/models/News";

// connectToDatabase();

// // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AWS S3 Client
// const s3 = new S3Client({
//   region: process.env.AWS_REGION,
//   credentials: {
//     accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
//     secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
//   },
// });

// // ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
// export async function GET() {
//   try {
//     const news = await News.find({}).sort({ pinned: -1, createdAt: -1 }); 
//     // pinned ‡∏Å‡πà‡∏≠‡∏ô (1 = true ‡∏ö‡∏ô), ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏° createdAt ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î

//     return NextResponse.json(news, { status: 200 });
//   } catch (error) {
//     const errorMessage = error instanceof Error ? error.message : "Unknown error";
//     return NextResponse.json({ message: "Failed to fetch news", error: errorMessage }, { status: 500 });
//   }
// }

// // ‚úÖ POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ã‡∏ü pinned ‡∏î‡πâ‡∏ß‡∏¢
// export async function POST(req: NextRequest) {
//   try {
//     const formData = await req.formData();
//     const file = formData.get("file") as File;
//     const title = formData.get("title") as string;
//     const content = formData.get("content") as string;
//     const pinnedString = formData.get("pinned") as string; // üÜï ‡∏î‡∏∂‡∏á pinned ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
//     const pinned = pinnedString ? JSON.parse(pinnedString) : false; // parse ‡πÄ‡∏õ‡πá‡∏ô boolean

//     if (!file || !title || !content) {
//       return NextResponse.json({ message: "Missing required fields" }, { status: 400 });
//     }

//     const fileName = `${Date.now()}-${file.name}`;
//     const uploadParams = {
//       Bucket: process.env.AWS_BUCKET_NAME,
//       Key: fileName,
//       Body: Buffer.from(await file.arrayBuffer()),
//       ContentType: file.type,
//     };

//     await s3.send(new PutObjectCommand(uploadParams));

//     const s3Url = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${fileName}`;

//     // ‚úÖ ‡∏ï‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å MongoDB ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ pinned ‡∏î‡πâ‡∏ß‡∏¢
//     const newNews = await News.create({
//       title,
//       image: s3Url,
//       content,
//       pinned,
//     });

//     return NextResponse.json(newNews, { status: 201 });
//   } catch (error) {
//     const errorMessage = error instanceof Error ? error.message : "Unknown error";
//     return NextResponse.json({ message: "Failed to create news", error: errorMessage }, { status: 500 });
//   }
// }

// // ‚úÖ DELETE: ‡∏•‡∏ö‡∏Ç‡πà‡∏≤‡∏ß
// export async function DELETE(req: NextRequest) {
//   try {
//     const { id } = await req.json();

//     if (!id) {
//       return NextResponse.json({ message: "News ID is required" }, { status: 400 });
//     }

//     const news = await News.findById(id);
//     if (!news) {
//       return NextResponse.json({ message: "News not found" }, { status: 404 });
//     }

//     const s3Key = news.image.split("/").pop();
//     const deleteParams = {
//       Bucket: process.env.AWS_BUCKET_NAME,
//       Key: s3Key,
//     };

//     await s3.send(new DeleteObjectCommand(deleteParams));

//     await News.deleteOne({ _id: id });

//     return NextResponse.json({ message: "News deleted successfully" }, { status: 200 });
//   } catch (error) {
//     const errorMessage = error instanceof Error ? error.message : "Unknown error";
//     return NextResponse.json({ message: "Failed to delete news", error: errorMessage }, { status: 500 });
//   }
// }

// app/api/news/route.ts
import { NextRequest, NextResponse } from "next/server";
import { S3Client, PutObjectCommand, DeleteObjectCommand } from "@aws-sdk/client-s3";
import connectToDatabase from "@/utils/db";
import News from "@/models/News";

connectToDatabase();

const s3 = new S3Client({
  region: process.env.AWS_REGION,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
  },
});

// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏£‡∏µ‡∏¢‡∏á: ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
export async function GET() {
  try {
    const news = await News.find({}).sort({ pinned: -1, createdAt: -1 });
    return NextResponse.json(news, { status: 200 });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Unknown error";
    return NextResponse.json({ message: "Failed to fetch news", error: errorMessage }, { status: 500 });
  }
}

// ‚úÖ POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà
export async function POST(req: NextRequest) {
  try {
    const formData = await req.formData();
    const file = formData.get("file") as File;
    const title = formData.get("title") as string;
    const content = formData.get("content") as string;
    const pinnedString = formData.get("pinned") as string;
    const pinned = pinnedString ? JSON.parse(pinnedString) : false;

    if (!file || !title || !content) {
      return NextResponse.json({ message: "Missing required fields" }, { status: 400 });
    }

    const fileName = `${Date.now()}-${file.name}`;
    const uploadParams = {
      Bucket: process.env.AWS_BUCKET_NAME,
      Key: fileName,
      Body: Buffer.from(await file.arrayBuffer()),
      ContentType: file.type,
    };

    await s3.send(new PutObjectCommand(uploadParams));

    const s3Url = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${fileName}`;

    const newNews = await News.create({
      title,
      image: s3Url,
      content,
      pinned,
    });

    return NextResponse.json(newNews, { status: 201 });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Unknown error";
    return NextResponse.json({ message: "Failed to create news", error: errorMessage }, { status: 500 });
  }
}

// ‚úÖ PATCH: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πà‡∏≤‡∏ß
export async function PATCH(req: NextRequest) {
  try {
    const { id, title, content, pinned } = await req.json();

    if (!id || !title || !content) {
      return NextResponse.json({ message: "Missing fields" }, { status: 400 });
    }

    const news = await News.findById(id);
    if (!news) {
      return NextResponse.json({ message: "News not found" }, { status: 404 });
    }

    news.title = title;
    news.content = content;
    news.pinned = pinned ?? news.pinned;
    await news.save();

    return NextResponse.json({ message: "News updated successfully" }, { status: 200 });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Unknown error";
    return NextResponse.json({ message: "Failed to update news", error: errorMessage }, { status: 500 });
  }
}

// ‚úÖ DELETE: ‡∏•‡∏ö‡∏Ç‡πà‡∏≤‡∏ß
export async function DELETE(req: NextRequest) {
  try {
    const { id } = await req.json();

    if (!id) {
      return NextResponse.json({ message: "News ID is required" }, { status: 400 });
    }

    const news = await News.findById(id);
    if (!news) {
      return NextResponse.json({ message: "News not found" }, { status: 404 });
    }

    const s3Key = news.image.split("/").pop();
    const deleteParams = {
      Bucket: process.env.AWS_BUCKET_NAME,
      Key: s3Key,
    };

    await s3.send(new DeleteObjectCommand(deleteParams));

    await News.deleteOne({ _id: id });

    return NextResponse.json({ message: "News deleted successfully" }, { status: 200 });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Unknown error";
    return NextResponse.json({ message: "Failed to delete news", error: errorMessage }, { status: 500 });
  }
}
